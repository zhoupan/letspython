[tool.poetry]
name = "letspython"
version = "0.0.1"
description = "Let's Python."
authors = ["zhoupan <ffitzhoupan@dingtalk.com>"]
repository = "https://github.com/zhoupan/letspython"
documentation = "https://zhoupan.github.io/letspython/"
readme = "README.md"
include = [{ path = "tests", format = "sdist" }]
packages = [{ include = "*", from = "src" }]

[tool.poetry.dependencies]
python = ">=3.8,<4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
deptry = "^0.12.0"
mypy = "^1.5.1"
pre-commit = "^3.4.0"
tox = "^4.11.1"
ruff = "^0.4.4"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocstrings = { extras = ["python"], version = "^0.23.0" }

[[tool.poetry.source]]
name = "baidu"
url = "https://mirror.baidu.com/pypi/simple"
priority = "primary"

[build-system]
requires = ["poetry-core>=1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = "src, tests"
mypy_path = "src"
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
extend-exclude = [
  "docs/*",
]
fix = true
line-length = 79
src = ["src"]
target-version = "py38"

[tool.ruff.lint]
extend-select = [
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "ERA", # flake8-eradicate/eradicate
  "I", # isort
  "N", # pep8-naming
  "PIE", # flake8-pie
  "PGH", # pygrep
  "RUF", # ruff checks
  "SIM", # flake8-simplify
  "T20", # flake8-print
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "UP", # pyupgrade
  #"D",   # pydocstyle
]
ignore = [
  "B904", # use 'raise ... from err'
  "B905", # use explicit 'strict=' parameter with 'zip()'
  "N818", #  Exception name should be named with an Error suffix
]
extend-safe-fixes = [
  "TCH", # move import from and to TYPE_CHECKING blocks
]
unfixable = [
  "ERA", # do not autoremove commented out code
]

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-single-line = true
lines-between-types = 1
lines-after-imports = 2
# required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["src"]
